// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id        Int       @id @default(autoincrement())
  name      String
  users     Author[]
  state     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model State {
  id        Int      @id @default(autoincrement())
  name      String
  users     Author[]
  city      City[]
  // connected only throught the country and countryId represents the id of the state s country
  country   Country? @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// while deleting the country the state will be also be deleted

model Country {
  id        Int      @id @default(autoincrement())
  name      String
  users     Author[]
  state     State[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Author {
  id        Int         @id @default(autoincrement())
  name      String
  email     String      @unique
  Dob       String
  city      City        @relation(fields: [cityId], references: [id])
  cityId    Int
  state     State       @relation(fields: [stateId], references: [id])
  stateId   Int
  country   Country     @relation(fields: [countryId], references: [id])
  countryId Int
  books     Book_data[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id          Int         @id @default(autoincrement())
  name        String
  publishedAt DateTime
  authors     Book_data[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book_data {
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
  author    Author   @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([bookId, authorId])
}
